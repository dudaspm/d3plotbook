#!/usr/bin/env python
# coding: utf-8

# # Topic Modeling - Graphically

# When considering topic modeling. It can be difficult to visualize the complexity when considering multiple topics. Presented is a means to create graphical concpetual model of documents in N-dimensions. 

# For this exercise we will be using D3.js to produce our graphic for topic modeling dimensionality. To start using D3.js in JupyterLab or Google Colab, we need to include the following pre-run call. Meaning, each time we run a cell. We want JupyterLab to make the D3.js library available. 

# In[1]:


from IPython.display import  HTML

def load_d3_in_cell_output():
  display(HTML("<script src='https://d3js.org/d3.v6.min.js'></script>"))
get_ipython().events.register('pre_run_cell', load_d3_in_cell_output)


# ## Topic Modeling -> Graphs

# First, let's talk about what is actually happening when it comes to topic modeling and it translate to a 2D graphic. For this, we are going have three topics (a topic on 🐈, a topic on 🐦, and a topic on 🐳). We are predefining these for the sake of simplisty. 

# Now that we have our topics, we need some documents to map to our topics. What we want to show is how related the document is to that given topic. If we are reading a document called "I love 🐦" we would expect it to map almost entirely to 🐦. Let's take a look at these extremes. 

# ```python
# something = 10
# something = something + 1
# 
# ```

# In[2]:


get_ipython().run_cell_magic('html', '', '<div id="extremes"></div>\n\n<script type="text/javascript">   \n    var width = 600\n    var height = 300\n    var documents = []\n    documents.push(({"title":"I love 🐦", "bird":1, "cat":0, "whale": 0, "icon":"🐦"}))\n    documents.push(({"title":"Swimming with 🐳", "bird":0, "cat":0, "whale": 1, "icon":"🐳"}))\n    documents.push(({"title":"Fancy 🐈", "bird":0, "cat":1, "whale": 0, "icon":"🐈"}))\n    console.log(documents)\n    var svg = d3.select("div#extremes").append("svg")\n        .attr("width", width)\n        .attr("height", height)\n    \n    var rectSize = 50\n    var splits = 7\n    svg.selectAll("rect.documents").data(documents)\n        .join("rect")\n        .attr("class","documents")\n        .attr("x",(width/splits) - rectSize/2)\n        .attr("y", (d,i)=>((height/5)*(i+1)) - rectSize/2)\n        .attr("width", rectSize)\n        .attr("height", rectSize)\n        .style("fill","lightgrey")\n        .style("stroke","black")\n        .style("stroke-width",1)\n        .on("mouseover", function(e,d){\n            d3.select(e.currentTarget).transition().style("stroke-width",3)    \n            var item = svg.selectAll("rect.documents").nodes();\n            var i = item.indexOf(this);\n            svg.select("circle#point_"+i)\n                .transition()\n                .duration(1000) \n                .ease(d3.easeBounce)\n                .attr("cy",(height/5))\n        })\n        .on("mouseout", function(e,d){\n            d3.select(e.currentTarget).transition().style("stroke-width",1)   \n            var item = svg.selectAll("rect.documents").nodes();\n            var i = item.indexOf(this);\n            svg.select("circle#point_"+i)\n                .transition()\n                .attr("cy",(height/5)*4)\n        })\n\n    svg.selectAll("text.documents").data(documents)\n        .join("text")\n        .attr("class","documents")\n        .attr("x",(width/splits) + (rectSize/2) + 10)\n        .attr("y", (d,i)=>(height/5)*(i+1))\n        .text(d=>d.title)\n        \n    svg.selectAll("line").data(documents)\n        .join("line")\n        .attr("x1", (d,i)=>(width/splits)*(i+4))\n        .attr("y1", (height/5))\n        .attr("x2", (d,i)=>(width/splits)*(i+4))\n        .attr("y2", (height/5)*4)\n        .style("stroke","black")\n        .style("stroke-width",1)\n        \n    svg.selectAll("circle.topics").data(documents)\n        .join("circle")\n        .attr("class","topics")\n        .attr("id", (d,i)=> "point_"+i)\n        .attr("cx", (d,i)=>(width/splits)*(i+4))\n        .attr("cy", (height/5)*4)\n        .attr("r",5)\n        .style("stroke","black")\n        .style("stroke-width",1)\n        \n    svg.selectAll("text.topics").data(documents)\n        .join("text")\n        .attr("class","topics")\n        .attr("x", (d,i)=>(width/splits)*(i+4))\n        .attr("y", (height/5))\n        .style("text-anchor", "middle")\n        .text(d=>d.icon)\n        \n        \n    svg.append("text")\n        .attr("x",(width/splits))\n        .attr("y",10)\n        \n        .text("Documents")\n\n    svg.append("text")\n        .attr("x",(width/splits)*5)\n        .attr("y",10)\n        .style("text-anchor", "middle")\n        .text("Topics")\n        \n        \n</script>')


# Based on this, when we have clearly defined documents, it is pretty easy to map them to a specific topic. But what's the fun in that? What about situations where documents have multiple topics. Let's take a look at this when our documents stretch over multiple topics. 

# In[3]:


get_ipython().run_cell_magic('html', '', '<div id="cotopic"></div>\n\n<script type="text/javascript">   \n    var width = 600\n    var height = 300\n    var topics = ["bird","cat","whale"]\n    var documents = []\n    documents.push(({"title":"The Adventures of 🐈 and 🐦", "bird":.5, "cat":.5, "whale": 0, "icon":"🐦"}))\n    documents.push(({"title":"Mammels: 🐈 to 🐳", "bird":0, "cat":.5, "whale": .5, "icon":"🐳"}))\n    documents.push(({"title":"At the Zoo 🐈, 🐳, and 🐦", "bird":.333, "cat":.333, "whale": .333, "icon":"🐈"}))\n    console.log(documents)\n    var svg = d3.select("div#cotopic").append("svg")\n        .attr("width", width)\n        .attr("height", height)\n    \n    var rectSize = 50\n    var splits = 7\n    svg.selectAll("rect.documents").data(documents)\n        .join("rect")\n        .attr("class","documents")\n        .attr("x",(width/splits) - rectSize/2)\n        .attr("y", (d,i)=>((height/5)*(i+1)) - rectSize/2)\n        .attr("width", rectSize)\n        .attr("height", rectSize)\n        .style("fill","lightgrey")\n        .style("stroke","black")\n        .style("stroke-width",1)\n        .on("mouseover", function(e,d){\n            d3.select(e.currentTarget).transition().style("stroke-width",3)    \n            var item = svg.selectAll("rect.documents").nodes();\n            var i = item.indexOf(this);\n            topics.forEach(function(e,j){\n                var top = (height/5)\n                var bottom = ((height/5)*4)\n                var middle = bottom-top\n                svg.select("circle#point2_"+j)\n                    .transition()\n                    .duration(1000) \n                    .ease(d3.easeBounce)\n                    .attr("cy", bottom-(middle * documents[i][topics[j]]))  \n            })\n\n        })\n        .on("mouseout", function(e,d){\n            d3.select(e.currentTarget).transition().style("stroke-width",1)   \n            var item = svg.selectAll("rect.documents").nodes();\n            var i = item.indexOf(this);\n            svg.selectAll("circle.point2")\n                .transition()\n                .attr("cy",(height/5)*4)\n        })\n\n    svg.selectAll("text.documents").data(documents)\n        .join("text")\n        .attr("class","documents")\n        .attr("x",(width/splits) + (rectSize/2) + 10)\n        .attr("y", (d,i)=>(height/5)*(i+1))\n        .text(d=>d.title)\n        \n    svg.selectAll("line").data(documents)\n        .join("line")\n        .attr("x1", (d,i)=>(width/splits)*(i+4))\n        .attr("y1", (height/5))\n        .attr("x2", (d,i)=>(width/splits)*(i+4))\n        .attr("y2", (height/5)*4)\n        .style("stroke","black")\n        .style("stroke-width",1)\n        \n    svg.selectAll("circle.point2").data(documents)\n        .join("circle")\n        .attr("class","point2")\n        .attr("id", (d,i)=> "point2_"+i)\n        .attr("cx", (d,i)=>(width/splits)*(i+4))\n        .attr("cy", (height/5)*4)\n        .attr("r",5)\n        .style("stroke","black")\n        .style("stroke-width",1)\n        \n    svg.selectAll("text.topics").data(documents)\n        .join("text")\n        .attr("class","topics")\n        .attr("x", (d,i)=>(width/splits)*(i+4))\n        .attr("y", (height/5))\n        .style("text-anchor", "middle")\n        .text(d=>d.icon)\n        \n        \n    svg.append("text")\n        .attr("x",(width/splits))\n        .attr("y",10)\n        \n        .text("Documents")\n\n    svg.append("text")\n        .attr("x",(width/splits)*5)\n        .attr("y",10)\n        .style("text-anchor", "middle")\n        .text("Topics")\n        \n        \n</script>')


# In[4]:


get_ipython().run_cell_magic('html', '', '<input type="range" min="1" max="10" value="0" name="topics" oninput="graph(+this.value)">\n<label for="topics">Weight Strength: </label><em id="topics" style="font-style: normal;">0</em>\n    \n<input type="button" onclick="addDocument()" value="Add More Documents">\n<div id="forceTopics"></div>\n\n<script type="text/javascript"> \n    var simulation\n    var width = 400\n    var height = 400\n    var margin = 30\n    var numOfDocs = 1\n    var currentWeighting = 0\n    var tri_x = [(width/2), width-margin, margin]\n    var margin = 60\n    var tri_y = [margin, height-margin, height-margin]   \n    nodes = []\n    nodes.push(({"name":"🐦","fx":tri_x[0],"fy":tri_y[0]}))\n    nodes.push(({"name":"🐳","fx":tri_x[1],"fy":tri_y[1]}))\n    nodes.push(({"name":"🐈","fx":tri_x[2],"fy":tri_y[2]}))\n    nodes.push(({"name":"🐈 and 🐦", "bird":.5, "cat":.5, "whale": 0, "icon":"🐦"}))\n    nodes.push(({"name":"🐈 to 🐳", "bird":0, "cat":.5, "whale": .5, "icon":"🐳"}))\n    nodes.push(({"name":"🐈, 🐳, and 🐦", "bird":.333, "cat":.333, "whale": .333, "icon":"🐈"}))\n    links = []  \n    links.push(({"source":nodes[0],"target":nodes[3],"weight":.5}))\n    links.push(({"source":nodes[1],"target":nodes[3],"weight":.5}))\n    links.push(({"source":nodes[2],"target":nodes[3],"weight":0}))\n    links.push(({"source":nodes[0],"target":nodes[4],"weight":0}))\n    links.push(({"source":nodes[1],"target":nodes[4],"weight":.5}))\n    links.push(({"source":nodes[2],"target":nodes[4],"weight":.5}))\n    links.push(({"source":nodes[0],"target":nodes[5],"weight":.333}))\n    links.push(({"source":nodes[1],"target":nodes[5],"weight":.333}))\n    links.push(({"source":nodes[2],"target":nodes[5],"weight":.333}))\n    var svg = d3.select("div#forceTopics").append("svg")\n        .attr("width", width)\n        .attr("height", height)          \n              \n    var simulation = d3.forceSimulation(nodes)\n        .force("link", d3.forceLink(links).id(d => d.name).strength(d=>d.weight*(0/10)))\n        .force("charge", d3.forceManyBody().strength(-30))\n        .force("center", d3.forceCenter(width / 2, height / 2))\n        .on("tick", ticked)\n  \n\n    var link = svg.selectAll("line.links")\n        .data(links).join("line")\n        .attr("class","links")\n        .style("stroke", "lightgrey")\n        .style("stroke-opacity", 0.6)\n        .attr("stroke-width", d => Math.sqrt(10*d.weight))\n\n    var scale = d3.scaleOrdinal(d3.schemeCategory10);\n    var node = svg.selectAll("text.nodes")\n        .data(nodes).join("text")\n        .attr("class","nodes")\n        .style("font-size", "20px")\n        .style("text-anchor", "middle")\n        .text(d => d.name)\n\n    node.append("title")\n      .text(d => d.name);\n\n    function ticked() {\n        svg.selectAll("text.nodes")\n            .attr("x",d=>d.x)\n            .attr("y",d=>d.y)\n        \n        svg.selectAll("line.links")\n            .attr("x1", d => d.source.x)\n            .attr("y1", d => d.source.y)\n            .attr("x2", d => d.target.x)\n            .attr("y2", d => d.target.y)\n        }\n    \nfunction graph(n) {\n\n    currentWeighting = n\n    var width = 400\n    var height = 400\n    simulation\n    .force("link", d3.forceLink(links).id(d => d.name).strength(d=>d.weight*(+n/10)))\n    .force("center", d3.forceCenter(width / 2, height / 2).strength(1-(+n/10)))\n    .alpha(.5)\n    .alphaTarget(0.3)\n    .restart();\n}\nfunction addDocument() {\n    \n    nodes.push(({"name":"Doc_"+numOfDocs}))\n    simulation.nodes(nodes)\n    w1 = Math.round(Math.random()*10)\n    w2 = Math.floor(Math.random() * (10 - w1))\n    w3 = (10 - w1) - w2\n\n    links.push(({"source":nodes[0],"target":nodes[5+numOfDocs],"weight":w1/10}))\n    links.push(({"source":nodes[1],"target":nodes[5+numOfDocs],"weight":w2/10}))\n    links.push(({"source":nodes[2],"target":nodes[5+numOfDocs],"weight":w3/10}))\n    simulation.force("link", d3.forceLink(links).id(d => d.name).strength(d=>d.weight*(currentWeighting/10)))\n\n    numOfDocs++\n    updateGraph()\n    \n\n}\nfunction updateGraph() {\n    svg.selectAll("line.links")\n        .data(links).join("line")\n        .attr("class","links")\n        .style("stroke", "#999")\n        .style("stroke-opacity", 0.6)\n        .attr("stroke-width", d => Math.sqrt(10*d.weight))\n    svg.selectAll("text")\n        .data(nodes).join("text")\n        .attr("class","nodes")\n        .style("font-size", "20px")\n        .style("text-anchor", "middle")\n        .text(d => d.name)    \n\n}\n\n\n</script>')


# Topics = 5
# 
# $n = 5$
# 
# $r = 3$
# 
# $\frac{n!}{ r! (n - r)!}$

# In[5]:


get_ipython().run_cell_magic('html', '', '<div id="emoji1"></div>\n\n<script type="text/javascript">   \n    var width = 500\n    var height = 200\n    var margin = 30\n    var fac = n => !(n > 1) ? 1 : fac(n - 1) * n;\n    var n = 5\n    var r = 3 \n    var soup = \'🐈,🐦,🐳,🐧,🐕,🐙,🐝,🐄,🐪,🐍,🐞,🐬,🐑,🐉,🐤,🐢,🐒,🐘,🐠,🐁\'.split(\',\');\n    \n    var topics = d3.range(n).map(d=>soup[d])\n    var sets = []\n    for (let i = 0; i < topics.length - 1; i++) {\n        for (let j = i+1; j < topics.length - 1; j++) {\n            for (let k = j+1; k < topics.length; k++) {\n                var temp = []\n                temp.push(topics[i])\n                temp.push(topics[j])\n                temp.push(topics[k])\n                sets.push(temp)\n            }\n        }\n    }\n\n    var triangles = fac(n) / ( fac(r) * fac(n - r) )\n    var tri_col = 10\n    var tri_row = Math.ceil(sets.length/tri_col)\n    var tri_size = 20\n    var x = d3.scaleLinear().range([margin , width - margin]).domain([0,tri_col-1])\n    var y = d3.scaleBand().range([margin, height-margin]).domain(d3.range(tri_row))\n  \n    var tri_x = [(tri_size/2), tri_size, 0]\n    var tri_y = [0, tri_size, tri_size]   \n    var palette = d3.interpolateTurbo\n    var color = d3.scaleLinear().range([0,1]).domain([0,topics.length-1])\n    \n    var svg = d3.select("div#emoji1").append("svg")\n        .attr("width", width)\n        .attr("height", height)\n        \n    var g = svg.selectAll("g")\n        .data(sets)\n        .join("g")\n        .attr("transform", (d,i) => "translate("+(x(i%tri_col))+","+(y(Math.floor(i/tri_col))+(y.bandwidth()/2))+")")\n    g.append("line")\n        .attr("x1", (d,i)=> tri_x[0])\n        .attr("y1", (d,i)=> tri_y[0])\n        .attr("x2", (d,i)=> tri_x[1])\n        .attr("y2", (d,i)=> tri_y[1])\n        .style("stroke", "black")\n        .style("stroke-width", "1px")\n    g.append("line")\n        .attr("x1", (d,i)=> tri_x[1])\n        .attr("y1", (d,i)=> tri_y[1])\n        .attr("x2", (d,i)=> tri_x[2])\n        .attr("y2", (d,i)=> tri_y[2])\n        .style("stroke", "black")\n        .style("stroke-width", "1px")\n    g.append("line")\n        .attr("x1", (d,i)=> tri_x[2])\n        .attr("y1", (d,i)=> tri_y[2])\n        .attr("x2", (d,i)=> tri_x[0])\n        .attr("y2", (d,i)=> tri_y[0])\n        .style("stroke", "black")\n        .style("stroke-width", "1px")    \n    \n    g.selectAll("text")\n        .data(d=>d)\n        .join("text")\n        .attr("x", (d,i)=> tri_x[i])\n        .attr("y", (d,i)=> tri_y[i])\n        .style("text-anchor", "middle")\n        .style("alignment-baseline","middle")\n        .text(d=>d)\n\n</script>')


# Animals = 6 

# In[6]:


get_ipython().run_cell_magic('html', '', '<div id="emoji2"></div>\n\n<script type="text/javascript">   \n    var width = 600\n    var height = 600\n    var margin = 30\n    var fac = n => !(n > 1) ? 1 : fac(n - 1) * n;\n    var n = 6\n    var r = 3 \n    var soup = \'🐈,🐦,🐳,🐧,🐕,🐙,🐝,🐄,🐪,🐍,🐞,🐬,🐑,🐉,🐤,🐢,🐒,🐘,🐠,🐁\'.split(\',\');\n    \n    var topics = d3.range(n).map(d=>soup[d])\n    var sets = []\n    for (let i = 0; i < topics.length - 1; i++) {\n        for (let j = i+1; j < topics.length - 1; j++) {\n            for (let k = j+1; k < topics.length; k++) {\n                var temp = []\n                temp.push(topics[i])\n                temp.push(topics[j])\n                temp.push(topics[k])\n                sets.push(temp)\n            }\n        }\n    }\n\n    var triangles = fac(n) / ( fac(r) * fac(n - r) )\n    var tri_col = 10\n    var tri_row = Math.ceil(sets.length/tri_col)\n    var tri_size = 20\n    var x = d3.scaleLinear().range([margin , width - margin]).domain([0,tri_col-1])\n    var y = d3.scaleBand().range([margin, height-margin]).domain(d3.range(tri_row))\n    console.log(d3.range(tri_row))\n  \n    var tri_x = [(tri_size/2), tri_size, 0]\n    var tri_y = [0, tri_size, tri_size]   \n    var palette = d3.interpolateTurbo\n    var color = d3.scaleLinear().range([0,1]).domain([0,topics.length-1])\n    console.log(y.bandwidth())\n    \n    var svg = d3.select("div#emoji2").append("svg")\n        .attr("width", width)\n        .attr("height", height)\n        \n    var g = svg.selectAll("g")\n        .data(sets)\n        .join("g")\n        .attr("transform", (d,i) => "translate("+(x(i%tri_col))+","+(y(Math.floor(i/tri_col))+(y.bandwidth()/2))+")")\n    g.append("line")\n        .attr("x1", (d,i)=> tri_x[0])\n        .attr("y1", (d,i)=> tri_y[0])\n        .attr("x2", (d,i)=> tri_x[1])\n        .attr("y2", (d,i)=> tri_y[1])\n        .style("stroke", "black")\n        .style("stroke-width", "1px")\n    g.append("line")\n        .attr("x1", (d,i)=> tri_x[1])\n        .attr("y1", (d,i)=> tri_y[1])\n        .attr("x2", (d,i)=> tri_x[2])\n        .attr("y2", (d,i)=> tri_y[2])\n        .style("stroke", "black")\n        .style("stroke-width", "1px")\n    g.append("line")\n        .attr("x1", (d,i)=> tri_x[2])\n        .attr("y1", (d,i)=> tri_y[2])\n        .attr("x2", (d,i)=> tri_x[0])\n        .attr("y2", (d,i)=> tri_y[0])\n        .style("stroke", "black")\n        .style("stroke-width", "1px")    \n    \n    g.selectAll("text")\n        .data(d=>d)\n        .join("text")\n        .attr("x", (d,i)=> tri_x[i])\n        .attr("y", (d,i)=> tri_y[i])\n        .style("text-anchor", "middle")\n        .text(d=>d)\n\n</script>')


# Animals = 7

# In[7]:


get_ipython().run_cell_magic('html', '', '<div id="emoji3"></div>\n\n<script type="text/javascript">   \n    var width = 600\n    var height = 600\n    var margin = 30\n    var fac = n => !(n > 1) ? 1 : fac(n - 1) * n;\n    var n = 7\n    var r = 3 \n    var soup = \'🐈,🐦,🐳,🐧,🐕,🐙,🐝,🐄,🐪,🐍,🐞,🐬,🐑,🐉,🐤,🐢,🐒,🐘,🐠,🐁\'.split(\',\');\n    \n    var topics = d3.range(n).map(d=>soup[d])\n    var sets = []\n    for (let i = 0; i < topics.length - 1; i++) {\n        for (let j = i+1; j < topics.length - 1; j++) {\n            for (let k = j+1; k < topics.length; k++) {\n                var temp = []\n                temp.push(topics[i])\n                temp.push(topics[j])\n                temp.push(topics[k])\n                sets.push(temp)\n            }\n        }\n    }\n\n    var triangles = fac(n) / ( fac(r) * fac(n - r) )\n    var tri_col = 10\n    var tri_row = Math.ceil(sets.length/tri_col)\n    var tri_size = 20\n    var x = d3.scaleLinear().range([margin , width - margin]).domain([0,tri_col-1])\n    var y = d3.scaleBand().range([margin, height-margin]).domain(d3.range(tri_row))\n    console.log(d3.range(tri_row))\n  \n    var tri_x = [(tri_size/2), tri_size, 0]\n    var tri_y = [0, tri_size, tri_size]   \n    var palette = d3.interpolateTurbo\n    var color = d3.scaleLinear().range([0,1]).domain([0,topics.length-1])\n    console.log(y.bandwidth())\n    \n    var svg = d3.select("div#emoji3").append("svg")\n        .attr("width", width)\n        .attr("height", height)\n        \n    var g = svg.selectAll("g")\n        .data(sets)\n        .join("g")\n        .attr("transform", (d,i) => "translate("+(x(i%tri_col))+","+(y(Math.floor(i/tri_col))+(y.bandwidth()/2))+")")\n    g.append("line")\n        .attr("x1", (d,i)=> tri_x[0])\n        .attr("y1", (d,i)=> tri_y[0])\n        .attr("x2", (d,i)=> tri_x[1])\n        .attr("y2", (d,i)=> tri_y[1])\n        .style("stroke", "black")\n        .style("stroke-width", "2px")\n    g.append("line")\n        .attr("x1", (d,i)=> tri_x[1])\n        .attr("y1", (d,i)=> tri_y[1])\n        .attr("x2", (d,i)=> tri_x[2])\n        .attr("y2", (d,i)=> tri_y[2])\n        .style("stroke", "black")\n        .style("stroke-width", "2px")\n    g.append("line")\n        .attr("x1", (d,i)=> tri_x[2])\n        .attr("y1", (d,i)=> tri_y[2])\n        .attr("x2", (d,i)=> tri_x[0])\n        .attr("y2", (d,i)=> tri_y[0])\n        .style("stroke", "black")\n        .style("stroke-width", "2px")    \n    \n    g.selectAll("text")\n        .data(d=>d)\n        .join("text")\n        .attr("x", (d,i)=> tri_x[i])\n        .attr("y", (d,i)=> tri_y[i])\n        .style("text-anchor", "middle")\n        .style("alignment-baseline","middle")\n        .text(d=>d)\n\n</script>')


# Topics = 8

# You can see how the complexity increase with the number of topics. Using the slider, change the number of topics to see how much this space increase with the number of topics. 

# In[8]:


get_ipython().run_cell_magic('html', '', '<input type="range" min="3" max="15" value="3" name="topics" oninput="graph(+this.value)">\n<label for="topics">Topics: </label><em id="topics" style="font-style: normal;">3</em>\n<div id="emojiN"></div>\n\n<script type="text/javascript">   \nfunction graph(n) {\n    document.getElementById(\'topics\').innerHTML = n\n    var width = 600\n    var height = 2000\n    var margin = 30\n    var fac = n => !(n > 1) ? 1 : fac(n - 1) * n;\n    var r = 3 \n    var soup = \'🐈,🐦,🐳,🐧,🐕,🐙,🐝,🐄,🐪,🐍,🐞,🐬,🐑,🐉,🐤,🐢,🐒,🐘,🐠,🐁\'.split(\',\');\n    \n    var topics = d3.range(n).map(d=>soup[d])\n    var sets = []\n    for (let i = 0; i < topics.length - 1; i++) {\n        for (let j = i+1; j < topics.length - 1; j++) {\n            for (let k = j+1; k < topics.length; k++) {\n                var temp = []\n                temp.push(topics[i])\n                temp.push(topics[j])\n                temp.push(topics[k])\n                sets.push(temp)\n            }\n        }\n    }\n\n    var triangles = fac(n) / ( fac(r) * fac(n - r) )\n    var tri_col = 10\n    var tri_row = Math.ceil(sets.length/tri_col)\n    var tri_size = 20\n    var x = d3.scaleLinear().range([margin , width - margin]).domain([0,tri_col-1])\n    var y = d3.scaleBand().range([margin, height-margin]).domain(d3.range(tri_row))\n  \n    var tri_x = [(tri_size/2), tri_size, 0]\n    var tri_y = [0, tri_size, tri_size]   \n    var palette = d3.interpolateTurbo\n    var color = d3.scaleLinear().range([0,1]).domain([0,topics.length-1])\n    d3.select("div#emojiN").select("svg").remove()\n    var svg = d3.select("div#emojiN").append("svg")\n        .attr("width", width)\n        .attr("height", height)\n        \n    var g = svg.selectAll("g")\n        .data(sets)\n        .join("g")\n        .attr("transform", (d,i) => "translate("+(x(i%tri_col))+","+(y(Math.floor(i/tri_col))+(y.bandwidth()/2))+")")\n    g.append("line")\n        .attr("x1", (d,i)=> tri_x[0])\n        .attr("y1", (d,i)=> tri_y[0])\n        .attr("x2", (d,i)=> tri_x[1])\n        .attr("y2", (d,i)=> tri_y[1])\n        .style("stroke", "black")\n        .style("stroke-width", "2px")\n    g.append("line")\n        .attr("x1", (d,i)=> tri_x[1])\n        .attr("y1", (d,i)=> tri_y[1])\n        .attr("x2", (d,i)=> tri_x[2])\n        .attr("y2", (d,i)=> tri_y[2])\n        .style("stroke", "black")\n        .style("stroke-width", "2px")\n    g.append("line")\n        .attr("x1", (d,i)=> tri_x[2])\n        .attr("y1", (d,i)=> tri_y[2])\n        .attr("x2", (d,i)=> tri_x[0])\n        .attr("y2", (d,i)=> tri_y[0])\n        .style("stroke", "black")\n        .style("stroke-width", "2px")    \n    \n    g.selectAll("text")\n        .data(d=>d)\n        .join("text")\n        .attr("x", (d,i)=> tri_x[i])\n        .attr("y", (d,i)=> tri_y[i])\n        .style("text-anchor", "middle")\n        .style("alignment-baseline","middle")\n        .text(d=>d)\n\n}\ngraph(3)\n</script>')

