#!/usr/bin/env python
# coding: utf-8

# # Scaling, Legends, and Color

# In[1]:


from IPython.display import HTML, Javascript, display

def configure_d3():
    display(Javascript("""
    require.config({
      paths: {
        d3: "https://d3js.org/d3.v6.min"
      }
    })"""))


configure_d3()


# In[2]:


get_ipython().run_cell_magic('html', '', '<script type="text/javascript">   \nrequire([\'d3\'], function (d3) {\n    \n    d3.csv(\'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/us_state_vaccinations.csv\')\n        .then(function(data) {\n            data = data.filter(d=> (d.location != "United States") && (d.total_vaccinations != ""))\n            const dateConverter = d3.timeParse("%Y-%m-%d")\n            data = data.map(d=> ({date:dateConverter(d.date),vaccinated:+d.people_vaccinated,location:d.location}))\n            console.log(data)\n        })\n        .catch(function(error){\n        //\n        })\n    \n})\n</script>')


# ### Acknowledgement 
# 
# <cite>Max Roser, Hannah Ritchie, Esteban Ortiz-Ospina and Joe Hasell (2020) - "Coronavirus Pandemic (COVID-19)". Published online at OurWorldInData.org. Retrieved from: 'https://ourworldindata.org/coronavirus' [Online Resource]</cite>
#     
# Original Link: https://github.com/owid/covid-19-data (Accessed 3/11/2021)
# Source Link: https://github.com/owid/covid-19-data/tree/master/public/data/vaccinations 
# 
# 
# Bostock, M., Ogievetsky, V., & Heer, J. (2011). DÂ³ data-driven documents. *IEEE transactions on visualization and computer graphics*, 17(12), 2301-2309.

# ### All Data

# In[3]:


get_ipython().run_cell_magic('html', '', '<div id="gohere1"></div>\n<script type="text/javascript">   \nrequire([\'d3\'], function (d3) {\n    \n    d3.csv(\'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/us_state_vaccinations.csv\')\n        .then(function(data) {\n            const width = 700\n            const height = 400\n            const margin = 60 \n            data = data.filter(d=> (d.location != "United States") && (d.total_vaccinations != ""))\n            const dateConverter = d3.timeParse("%Y-%m-%d")\n            data = data.map(d=> ({date:dateConverter(d.date),vaccinated:+d.people_vaccinated,location:d.location}))\n            \n            const xScale = d3.scaleTime().range([margin , width - margin]).domain(d3.extent(data, (d,i) => d.date))\n            const yScale = d3.scaleLinear().range([height-margin , margin]).domain(d3.extent(data, (d,i) => d.vaccinated))\n            \n            const line = d3.line()\n                .x((d,i)=> xScale(d.date)) \n                .y((d,i)=> yScale(d.vaccinated)) \n            \n            \n            const svg = d3.select("div#gohere1").append("svg")\n                .attr("width", width)\n                .attr("height", height)\n            \n            \n            const xAxis = d3.axisBottom().scale(xScale).tickFormat(d3.timeFormat("%m-%d"))\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(0," + (height-margin) + ")")\n                .call(xAxis) \n            \n            svg.append("text")\n                .attr("x", width/2)\n                .attr("y", height-5)\n                .style("text-anchor", "middle")\n                .text("Date")\n            \n            const yAxis = d3.axisLeft().scale(yScale).tickFormat((d,i) => d/100000 )\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(" + margin + ",0)")\n                .call(yAxis)  \n            \n            svg.append("text")\n                .attr("transform", "rotate(-90,15,"+(height/2)+")")\n                .attr("x", 15)\n                .attr("y", height/2)\n                .style("text-anchor", "middle")\n                .text("People Vaccinated (x 100000)") \n            \n            svg.selectAll("circle")\n                .data(data)\n                .join("circle")\n                .attr("cx", (d,i)=> xScale(d.date))\n                .attr("cy", (d,i)=> yScale(d.vaccinated))\n                .attr("r", 5)\n                .append("title")\n                .text(d=> "Location: "+d.location+"\\nVaccinated: "+d.vaccinated)\n                \n            \n            \n        })\n        .catch(function(error){\n        \n        })\n    \n})\n</script>')


# Sorting: https://observablehq.com/@d3/d3-ascending

# In[4]:


get_ipython().run_cell_magic('html', '', '<div id="gohere2"></div>\n<script type="text/javascript">   \nrequire([\'d3\'], function (d3) {\n    \n    d3.csv(\'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/us_state_vaccinations.csv\')\n        .then(function(data) {\n            const width = 700\n            const height = 400\n            const margin = 60 \n            data = data.filter(d=> (d.location != "United States") && (d.total_vaccinations != ""))\n            const dataParse = d3.timeParse("%Y-%m-%d") // creates the date object\n            const dataFormat = d3.timeFormat("%Y-%m-%d") // creates a string from the date object\n            data = data.map(d=> ({date:dataParse(d.date),vaccinated:+d.people_vaccinated,location:d.location}))\n            console.log(data.sort((a, b) => b.date - a.date)[0])\n            const lastDate = data.sort((a, b) => b.date - a.date)[0].date\n            data = data.filter(d=> dataFormat(d.date) == dataFormat(lastDate) )\n            console.log(data)\n            \n            // Sorting by vaccinated and using a linear scale\n            data = data.sort((a, b) => b.vaccinated - a.vaccinated)\n            const xScale = d3.scaleLinear().range([margin , width - margin]).domain(d3.extent(data, (d,i) => i))\n            const yScale = d3.scaleLinear().range([height-margin , margin]).domain(d3.extent(data, (d,i) => d.vaccinated))\n            \n            \n            const svg = d3.select("div#gohere2").append("svg")\n                .attr("width", width)\n                .attr("height", height)\n            \n            \n            const xAxis = d3.axisBottom().scale(xScale)\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(0," + (height-margin) + ")")\n                .call(xAxis) \n            \n            svg.append("text")\n                .attr("x", width/2)\n                .attr("y", height-5)\n                .style("text-anchor", "middle")\n                .text("Index ordered by vaccinated")\n            \n            const yAxis = d3.axisLeft().scale(yScale).tickFormat((d,i) => d/100000 )\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(" + margin + ",0)")\n                .call(yAxis)  \n            \n            svg.append("text")\n                .attr("transform", "rotate(-90,15,"+(height/2)+")")\n                .attr("x", 15)\n                .attr("y", height/2)\n                .style("text-anchor", "middle")\n                .text("People Vaccinated (x 100000)") \n            \n            svg.selectAll("circle")\n                .data(data)\n                .join("circle")\n                .attr("cx", (d,i)=> xScale(i))\n                .attr("cy", (d,i)=> yScale(d.vaccinated))\n                .attr("r", 5)\n                .append("title")\n                .text(d=> "Location: "+d.location+" Vaccinated: "+d.vaccinated)\n                \n            \n            \n        })\n        .catch(function(error){\n        \n        })\n    \n})\n</script>')


# ### Log

# In[5]:


get_ipython().run_cell_magic('html', '', '<div id="gohere3"></div>\n<script type="text/javascript">   \nrequire([\'d3\'], function (d3) {\n    \n    d3.csv(\'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/us_state_vaccinations.csv\')\n        .then(function(data) {\n            const width = 700\n            const height = 500\n            const margin = 60 \n            data = data.filter(d=> (d.location != "United States") && (d.total_vaccinations != ""))\n            const dataParse = d3.timeParse("%Y-%m-%d")\n            const dataFormat = d3.timeFormat("%Y-%m-%d")\n            data = data.map(d=> ({date:dataParse(d.date),vaccinated:+d.people_vaccinated,location:d.location}))\n            console.log(data.sort((a, b) => b.date - a.date)[0])\n            const lastDate = data.sort((a, b) => b.date - a.date)[0].date\n            data = data.filter(d=> dataFormat(d.date) == dataFormat(lastDate) )\n            console.log(data)\n            \n            // Sorting by vaccinated and using a linear scale\n            data = data.sort((a, b) => b.vaccinated - a.vaccinated)\n            data = data.filter(d=> d.vaccinated != 0 )\n            const xScale = d3.scaleLinear().range([margin , width - margin]).domain(d3.extent(data, (d,i) => i))\n            const yScale = d3.scaleLog().range([height-margin , margin]).domain(d3.extent(data, (d,i) => d.vaccinated))\n            \n            \n            const svg = d3.select("div#gohere3").append("svg")\n                .attr("width", width)\n                .attr("height", height)\n            \n            \n            const xAxis = d3.axisBottom().scale(xScale)\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(0," + (height-margin) + ")")\n                .call(xAxis) \n            \n            svg.append("text")\n                .attr("x", width/2)\n                .attr("y", height-5)\n                .style("text-anchor", "middle")\n                .text("Index ordered by vaccinated")\n            \n            const yAxis = d3.axisLeft().scale(yScale).tickFormat((d,i) => d/100000 )\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(" + margin + ",0)")\n                .call(yAxis)  \n            \n            svg.append("text")\n                .attr("transform", "rotate(-90,15,"+(height/2)+")")\n                .attr("x", 15)\n                .attr("y", height/2)\n                .style("text-anchor", "middle")\n                .text("People Vaccinated (x 100000)") \n            \n            svg.selectAll("circle")\n                .data(data)\n                .join("circle")\n                .attr("cx", (d,i)=> xScale(i))\n                .attr("cy", (d,i)=> yScale(d.vaccinated))\n                .attr("r", 5)\n                .append("title")\n                .text(d=> "Location: "+d.location+" Vaccinated: "+d.vaccinated)\n                \n            \n            \n        })\n        .catch(function(error){\n        \n        })\n    \n})\n</script>')


# ### Power Scales - 
# 
# mx^k + b, where k is the exponent value
# 
# https://github.com/d3/d3-scale#scalePow

# In[6]:


get_ipython().run_cell_magic('html', '', '<div id="gohere4"></div>\n<script type="text/javascript">   \nrequire([\'d3\'], function (d3) {\n    \n    d3.csv(\'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/us_state_vaccinations.csv\')\n        .then(function(data) {\n            const width = 700\n            const height = 500\n            const margin = 60 \n            data = data.filter(d=> (d.location != "United States") && (d.total_vaccinations != ""))\n            const dataParse = d3.timeParse("%Y-%m-%d")\n            const dataFormat = d3.timeFormat("%Y-%m-%d")\n            data = data.map(d=> ({date:dataParse(d.date),vaccinated:+d.people_vaccinated,location:d.location}))\n            console.log(data.sort((a, b) => b.date - a.date)[0])\n            const lastDate = data.sort((a, b) => b.date - a.date)[0].date\n            data = data.filter(d=> dataFormat(d.date) == dataFormat(lastDate) )\n            console.log(data)\n            \n            // Sorting by vaccinated and using a linear scale\n            data = data.sort((a, b) => b.vaccinated - a.vaccinated)\n\n            const xScale = d3.scaleLinear().range([margin , width - margin]).domain(d3.extent(data, (d,i) => i))\n            const yScale = d3.scalePow().exponent(.5).range([height-margin , margin]).domain(d3.extent(data, (d,i) => d.vaccinated))\n            \n            \n            const svg = d3.select("div#gohere4").append("svg")\n                .attr("width", width)\n                .attr("height", height)\n            \n            \n            const xAxis = d3.axisBottom().scale(xScale)\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(0," + (height-margin) + ")")\n                .call(xAxis) \n            \n            svg.append("text")\n                .attr("x", width/2)\n                .attr("y", height-5)\n                .style("text-anchor", "middle")\n                .text("Index ordered by vaccinated")\n            \n            const yAxis = d3.axisLeft().scale(yScale).tickFormat((d,i) => d/100000 )\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(" + margin + ",0)")\n                .call(yAxis)  \n            \n            svg.append("text")\n                .attr("transform", "rotate(-90,15,"+(height/2)+")")\n                .attr("x", 15)\n                .attr("y", height/2)\n                .style("text-anchor", "middle")\n                .text("People Vaccinated (x 100000)") \n            \n            svg.selectAll("circle")\n                .data(data)\n                .join("circle")\n                .attr("cx", (d,i)=> xScale(i))\n                .attr("cy", (d,i)=> yScale(d.vaccinated))\n                .attr("r", 5)\n                .append("title")\n                .text(d=> "Location: "+d.location+" Vaccinated: "+d.vaccinated)\n                \n            \n            \n        })\n        .catch(function(error){\n        \n        })\n    \n})\n</script>')


# ####  k=.25

# In[7]:


get_ipython().run_cell_magic('html', '', '<div id="gohere5"></div>\n<script type="text/javascript">   \nrequire([\'d3\'], function (d3) {\n    \n    d3.csv(\'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/us_state_vaccinations.csv\')\n        .then(function(data) {\n            const width = 700\n            const height = 500\n            const margin = 60 \n            data = data.filter(d=> (d.location != "United States") && (d.total_vaccinations != ""))\n            const dataParse = d3.timeParse("%Y-%m-%d")\n            const dataFormat = d3.timeFormat("%Y-%m-%d")\n            data = data.map(d=> ({date:dataParse(d.date),vaccinated:+d.people_vaccinated,location:d.location}))\n            const lastDate = data.sort((a, b) => b.date - a.date)[0].date\n            data = data.filter(d=> dataFormat(d.date) == dataFormat(lastDate) )\n            \n            // Sorting by vaccinated and using a linear scale\n            data = data.sort((a, b) => b.vaccinated - a.vaccinated)\n\n            const xScale = d3.scaleLinear().range([margin , width - margin]).domain(d3.extent(data, (d,i) => i))\n            const yScale = d3.scalePow().exponent(.25).range([height-margin , margin]).domain(d3.extent(data, (d,i) => d.vaccinated))\n            \n            \n            const svg = d3.select("div#gohere5").append("svg")\n                .attr("width", width)\n                .attr("height", height)\n            \n            \n            const xAxis = d3.axisBottom().scale(xScale)\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(0," + (height-margin) + ")")\n                .call(xAxis) \n            \n            svg.append("text")\n                .attr("x", width/2)\n                .attr("y", height-5)\n                .style("text-anchor", "middle")\n                .text("Index ordered by vaccinated")\n            \n            const yAxis = d3.axisLeft().scale(yScale).tickFormat((d,i) => d/100000 )\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(" + margin + ",0)")\n                .call(yAxis)  \n            \n            svg.append("text")\n                .attr("transform", "rotate(-90,15,"+(height/2)+")")\n                .attr("x", 15)\n                .attr("y", height/2)\n                .style("text-anchor", "middle")\n                .text("People Vaccinated (x 100000)") \n            \n            svg.selectAll("circle")\n                .data(data)\n                .join("circle")\n                .attr("cx", (d,i)=> xScale(i))\n                .attr("cy", (d,i)=> yScale(d.vaccinated))\n                .attr("r", 5)\n                .append("title")\n                .text(d=> "Location: "+d.location+" Vaccinated: "+d.vaccinated)\n                \n            \n            \n        })\n        .catch(function(error){\n        \n        })\n    \n})\n</script>')


# #### k=.75

# In[8]:


get_ipython().run_cell_magic('html', '', '<div id="gohere6"></div>\n<script type="text/javascript">   \nrequire([\'d3\'], function (d3) {\n    \n    d3.csv(\'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/us_state_vaccinations.csv\')\n        .then(function(data) {\n            const width = 700\n            const height = 500\n            const margin = 60 \n            data = data.filter(d=> (d.location != "United States") && (d.total_vaccinations != ""))\n            const dataParse = d3.timeParse("%Y-%m-%d")\n            const dataFormat = d3.timeFormat("%Y-%m-%d")\n            data = data.map(d=> ({date:dataParse(d.date),vaccinated:+d.people_vaccinated,location:d.location}))\n            const lastDate = data.sort((a, b) => b.date - a.date)[0].date\n            data = data.filter(d=> dataFormat(d.date) == dataFormat(lastDate) )\n            \n            // Sorting by vaccinated and using a linear scale\n            data = data.sort((a, b) => b.vaccinated - a.vaccinated)\n\n            const xScale = d3.scaleLinear().range([margin , width - margin]).domain(d3.extent(data, (d,i) => i))\n            const yScale = d3.scalePow().exponent(1).range([height-margin , margin]).domain(d3.extent(data, (d,i) => d.vaccinated))\n            \n            \n            const svg = d3.select("div#gohere6").append("svg")\n                .attr("width", width)\n                .attr("height", height)\n            \n            \n            const xAxis = d3.axisBottom().scale(xScale)\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(0," + (height-margin) + ")")\n                .call(xAxis) \n            \n            svg.append("text")\n                .attr("x", width/2)\n                .attr("y", height-5)\n                .style("text-anchor", "middle")\n                .text("Index ordered by vaccinated")\n            \n            const yAxis = d3.axisLeft().scale(yScale).tickFormat((d,i) => d/100000 )\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(" + margin + ",0)")\n                .call(yAxis)  \n            \n            svg.append("text")\n                .attr("transform", "rotate(-90,15,"+(height/2)+")")\n                .attr("x", 15)\n                .attr("y", height/2)\n                .style("text-anchor", "middle")\n                .text("People Vaccinated (x 100000)") \n            \n            svg.selectAll("circle")\n                .data(data)\n                .join("circle")\n                .attr("cx", (d,i)=> xScale(i))\n                .attr("cy", (d,i)=> yScale(d.vaccinated))\n                .attr("r", 5)\n                .append("title")\n                .text(d=> "Location: "+d.location+" Vaccinated: "+d.vaccinated)\n                \n            \n            \n        })\n        .catch(function(error){\n        \n        })\n    \n})\n</script>')


# ## Discrete Bins

# There is a really nice tutorial about this located here: https://observablehq.com/@d3/quantile-quantize-and-threshold-scales?collection=@d3/d3-scale

# In[9]:


get_ipython().run_cell_magic('html', '', '<div id="gohere6b"></div>\n<script type="text/javascript">   \nrequire([\'d3\'], function (d3) {\n    \n    d3.csv(\'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/us_state_vaccinations.csv\')\n        .then(function(data) {\n            const width = 700\n            const height = 500\n            const margin = 60 \n            data = data.filter(d=> (d.location != "United States") && (d.total_vaccinations != ""))\n            const dataParse = d3.timeParse("%Y-%m-%d")\n            const dataFormat = d3.timeFormat("%Y-%m-%d")\n            data = data.map(d=> ({date:dataParse(d.date),vaccinated:+d.people_vaccinated,location:d.location}))\n\n            const lastDate = data.sort((a, b) => b.date - a.date)[0].date\n            data = data.filter(d=> dataFormat(d.date) == dataFormat(lastDate) )\n            \n            // Sorting by vaccinated and using a linear scale\n            data = data.sort((a, b) => b.vaccinated - a.vaccinated)\n\n            const xScale = d3.scaleLinear().range([margin , width - margin]).domain(d3.extent(data, (d,i) => i))\n            \n            const cut1 = 300000\n            const cut2 = 3000000\n            const yScale = d3.scaleThreshold().range([height-margin, (height-margin)/2, margin]).domain([cut1, cut2])            \n               \n            const svg = d3.select("div#gohere6b").append("svg")\n                .attr("width", width)\n                .attr("height", height)\n            \n            \n            const xAxis = d3.axisBottom().scale(xScale)\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(0," + (height-margin) + ")")\n                .call(xAxis) \n            \n            svg.append("text")\n                .attr("x", width/2)\n                .attr("y", height-5)\n                .style("text-anchor", "middle")\n                .text("Index ordered by vaccinated")\n            \n            const yAxis = d3.axisLeft().scale(yScale).tickFormat((d,i) => d/100000 )\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(" + margin + ",0)")\n                .call(yAxis)  \n            \n            svg.append("text")\n                .attr("transform", "rotate(-90,15,"+(height/2)+")")\n                .attr("x", 15)\n                .attr("y", height/2)\n                .style("text-anchor", "middle")\n                .text("People Vaccinated (x 100000)") \n            \n            svg.selectAll("circle")\n                .data(data)\n                .join("circle")\n                .attr("cx", (d,i)=> xScale(i))\n                .attr("cy", (d,i)=> yScale(d.vaccinated))\n                .attr("r", 5)\n                .append("title")\n                .text(d=> "Location: "+d.location+" Vaccinated: "+d.vaccinated)\n                \n            \n            \n        })\n        .catch(function(error){\n        \n        })\n    \n})\n</script>')


# ### Quantize

# In[10]:


get_ipython().run_cell_magic('html', '', '<div id="gohere7"></div>\n<script type="text/javascript">   \nrequire([\'d3\'], function (d3) {\n    \n    d3.csv(\'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/us_state_vaccinations.csv\')\n        .then(function(data) {\n            const width = 700\n            const height = 500\n            const margin = 60 \n            data = data.filter(d=> (d.location != "United States") && (d.total_vaccinations != ""))\n            const dataParse = d3.timeParse("%Y-%m-%d")\n            const dataFormat = d3.timeFormat("%Y-%m-%d")\n            data = data.map(d=> ({date:dataParse(d.date),vaccinated:+d.people_vaccinated,location:d.location}))\n\n            const lastDate = data.sort((a, b) => b.date - a.date)[0].date\n            data = data.filter(d=> dataFormat(d.date) == dataFormat(lastDate) )\n            \n            // Sorting by vaccinated and using a linear scale\n            data = data.sort((a, b) => b.vaccinated - a.vaccinated)\n\n            const xScale = d3.scaleLinear().range([margin , width - margin]).domain(d3.extent(data, (d,i) => i))\n            \n            const q1 = d3.quantile(data.map(d=> d.vaccinated).sort(d3.ascending),.33)\n            const q2 = d3.quantile(data.map(d=> d.vaccinated).sort(d3.ascending),.66)\n            console.log(q1,q2,d3.max(data,d=>d.vaccinated))\n            const yScale = d3.scaleQuantize().range([height-margin, (height-margin)/2, margin]).domain(d3.extent(data,d=>d.vaccinated))          \n               \n            const svg = d3.select("div#gohere7").append("svg")\n                .attr("width", width)\n                .attr("height", height)\n            \n            \n            const xAxis = d3.axisBottom().scale(xScale)\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(0," + (height-margin) + ")")\n                .call(xAxis) \n            \n            svg.append("text")\n                .attr("x", width/2)\n                .attr("y", height-5)\n                .style("text-anchor", "middle")\n                .text("Index ordered by vaccinated")\n            \n            const yAxis = d3.axisLeft().scale(yScale).tickFormat((d,i) => d/100000 )\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(" + margin + ",0)")\n                .call(yAxis)  \n            \n            svg.append("text")\n                .attr("transform", "rotate(-90,15,"+(height/2)+")")\n                .attr("x", 15)\n                .attr("y", height/2)\n                .style("text-anchor", "middle")\n                .text("People Vaccinated (x 100000)") \n            \n            svg.selectAll("circle")\n                .data(data)\n                .join("circle")\n                .attr("cx", (d,i)=> xScale(i))\n                .attr("cy", (d,i)=> yScale(d.vaccinated))\n                .attr("r", 5)\n                .append("title")\n                .text(d=> "Location: "+d.location+" Vaccinated: "+d.vaccinated)\n                \n            \n            \n        })\n        .catch(function(error){\n        \n        })\n    \n})\n</script>')


# #### Quantile

# In[11]:


get_ipython().run_cell_magic('html', '', '<div id="gohere8"></div>\n<script type="text/javascript">   \nrequire([\'d3\'], function (d3) {\n    \n    d3.csv(\'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/us_state_vaccinations.csv\')\n        .then(function(data) {\n            const width = 700\n            const height = 500\n            const margin = 60 \n            data = data.filter(d=> (d.location != "United States") && (d.total_vaccinations != ""))\n            const dataParse = d3.timeParse("%Y-%m-%d")\n            const dataFormat = d3.timeFormat("%Y-%m-%d")\n            data = data.map(d=> ({date:dataParse(d.date),vaccinated:+d.people_vaccinated,location:d.location}))\n\n            const lastDate = data.sort((a, b) => b.date - a.date)[0].date\n            data = data.filter(d=> dataFormat(d.date) == dataFormat(lastDate) )\n            \n            // Sorting by vaccinated and using a linear scale\n            data = data.sort((a, b) => b.vaccinated - a.vaccinated)\n\n            const xScale = d3.scaleLinear().range([margin , width - margin]).domain(d3.extent(data, (d,i) => i))\n\n            const yScale = d3.scaleQuantile().range([height-margin, (height-margin)/2, margin]).domain(data.map(d=>d.vaccinated))   \n            \n            const svg = d3.select("div#gohere8").append("svg")\n                .attr("width", width)\n                .attr("height", height)\n            \n            \n            const xAxis = d3.axisBottom().scale(xScale)\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(0," + (height-margin) + ")")\n                .call(xAxis) \n            \n            svg.append("text")\n                .attr("x", width/2)\n                .attr("y", height-5)\n                .style("text-anchor", "middle")\n                .text("Index ordered by vaccinated")\n            \n            const yAxis = d3.axisLeft().scale(yScale).tickFormat((d,i) => d/100000 )\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(" + margin + ",0)")\n                .call(yAxis)  \n            \n            svg.append("text")\n                .attr("transform", "rotate(-90,15,"+(height/2)+")")\n                .attr("x", 15)\n                .attr("y", height/2)\n                .style("text-anchor", "middle")\n                .text("People Vaccinated (x 100000)") \n            \n            svg.selectAll("circle")\n                .data(data)\n                .join("circle")\n                .attr("cx", (d,i)=> xScale(i))\n                .attr("cy", (d,i)=> yScale(d.vaccinated))\n                .attr("r", 5)\n                .append("title")\n                .text(d=> "Location: "+d[0]\n                      .location+" Vaccinated: "+d.vaccinated)\n                \n            \n            \n        })\n        .catch(function(error){\n            console.log(error)\n        })\n    \n})\n</script>')


# ### Legends

# D3.js Colors - https://github.com/d3/d3-scale-chromatic

# In[12]:


get_ipython().run_cell_magic('html', '', '<div id="legend1"></div>\n<script type="text/javascript">   \nrequire([\'d3\'], function (d3) {\n    \n    d3.csv(\'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/us_state_vaccinations.csv\')\n        .then(function(data) {\n            const width = 800\n            const height = 300\n            const margin = 40 \n            data = data.filter(d=> (d.location != "United States") && (d.total_vaccinations != ""))\n            const dataParse = d3.timeParse("%Y-%m-%d") // creates the date object\n            const dataFormat = d3.timeFormat("%Y-%m-%d") // creates a string from the date object\n            data = data.map(d=> ({date:dataParse(d.date),vaccinated:+d.people_vaccinated,location:d.location}))\n\n            const lastDate = data.sort((a, b) => b.date - a.date)[0].date\n            data = data.filter(d=> dataFormat(d.date) == dataFormat(lastDate) )\n            data = data.filter(d=> d.vaccinated != 0 )\n\n            data = data.sort((a, b) => b.vaccinated - a.vaccinated)\n            const palette = d3.interpolateTurbo\n            const scaling = d3.scaleLog().range([margin,width-margin]).domain(d3.extent(data, (d,i) => d.vaccinated))\n            const x = d3.scaleLinear().range([width-margin,margin]).domain(d3.extent(data, (d,i) => i))\n            const coloringCircles = d3.scaleLog().range([0,1]).domain(d3.extent(data, (d,i) => d.vaccinated))\n            \n            \n            const svg = d3.select("div#legend1").append("svg")\n                .attr("width", width)\n                .attr("height", height)\n            \n            \n            const xAxis = d3.axisBottom().scale(scaling).ticks(15, "~s")\n            \n            svg.append("g")\n                .attr("class", "axis")\n                .attr("transform", "translate(0," + (height-margin) + ")")\n                .call(xAxis) \n\n            svg.append("text")\n                .attr("x", width/2)\n                .attr("y", height-5)\n                .style("text-anchor", "middle")\n                .text("Vaccinated (Log Scale)")\n            \n            svg.selectAll("circle")\n                .data(data)\n                .join("circle")\n                .attr("cx", (d,i)=> x(i))\n                .attr("cy", (d,i)=> height/2)\n                .attr("r", 5)\n                .style("fill",d=>palette(coloringCircles(d.vaccinated)))\n                .style("stroke","black")\n                .style("stroke-width",1)\n                .append("title")\n                .text(d=> "Location: "+d.location+" Vaccinated: "+d.vaccinated)            \n            \n            const num = 20\n            const values = d3.range(1,num)\n            \n            const coloring = d3.scaleLinear().range([0,1]).domain(d3.extent(values))\n            var defs = svg.append("defs")\n            var linearGradient = defs.append("linearGradient")\n                .attr("id", "linear-gradient1") \n\n            linearGradient.selectAll("stop").data(values).join("stop")\n                .attr("offset", d=> d/num)\n                .attr("stop-color", d=>palette(coloring(d)) )\n            svg.append("rect")\n                .attr("x", margin)\n                .attr("y", (height-margin)-50)\n                .attr("width", (width-margin)-(margin))\n                .attr("height", 50)\n                .style("fill", "url(#linear-gradient1)")\n\n            \n        })\n        .catch(function(error){\n            console.log(error)\n        })\n    \n})\n</script>')


# In[ ]:




